{"version":3,"sources":["../src/copy-object-multipart.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    S3Client,\r\n    CreateMultipartUploadCommand,\r\n    UploadPartCopyCommand,\r\n    AbortMultipartUploadCommand,\r\n    ListPartsCommand,\r\n    CompleteMultipartUploadCommand,\r\n    CompleteMultipartUploadCommandInput,\r\n    UploadPartCopyCommandOutput,\r\n    CompletedPart,\r\n    AbortMultipartUploadCommandInput,\r\n    CreateMultipartUploadCommandInput,\r\n    CompleteMultipartUploadCommandOutput,\r\n    AbortMultipartUploadCommandOutput,\r\n} from \"@aws-sdk/client-s3\";\r\nimport * as _ from \"lodash\";\r\n\r\nconst COPY_PART_SIZE_MINIMUM_BYTES = 5242880; // 5MB in bytes\r\nconst DEFAULT_COPY_PART_SIZE_BYTES = 50000000; // 50 MB in bytes\r\nconst DEFAULT_COPIED_OBJECT_PERMISSIONS = \"private\";\r\n\r\nexport interface Logger {\r\n    info: (arg: LoggerInfoArgument) => any;\r\n    error: (arg: LoggerErrorArgument) => any;\r\n}\r\nexport interface LoggerInfoArgument {\r\n    msg: string;\r\n    context?: string;\r\n}\r\n\r\nexport interface LoggerErrorArgument {\r\n    msg: string;\r\n    error?: ErrorWithDetails;\r\n    context?: string;\r\n}\r\n\r\nexport class ErrorWithDetails extends Error {\r\n    details?: any;\r\n}\r\n\r\nexport interface CopyObjectMultipartOptions {\r\n    source_bucket: string;\r\n    object_key: string;\r\n    destination_bucket: string;\r\n    copied_object_name: string;\r\n    object_size: number;\r\n    copy_part_size_bytes?: number;\r\n    copied_object_permissions?: string;\r\n    expiration_period?: Date;\r\n    server_side_encryption?: string;\r\n    content_type?: string;\r\n    content_disposition?: string;\r\n    content_encoding?: string;\r\n    content_language?: string;\r\n    metadata?: Record<string, string>;\r\n    cache_control?: string;\r\n    storage_class?: string;\r\n}\r\n\r\nexport interface Options {\r\n    abortController?: AbortController;\r\n    logger?: Logger;\r\n    s3Client: S3Client;\r\n    params: CopyObjectMultipartOptions;\r\n}\r\n\r\nexport class CopyMultipart {\r\n    s3Client: S3Client;\r\n    logger: Logger;\r\n    abortController: AbortController;\r\n    params: CopyObjectMultipartOptions;\r\n\r\n    uploadId: string | undefined;\r\n\r\n    constructor(options: Options) {\r\n        this.logger = options.logger || getDefaultLogger();\r\n        this.s3Client = options.s3Client;\r\n        this.params = options.params;\r\n        this.abortController = options.abortController ?? new AbortController();\r\n    }\r\n    async abort(): Promise<void> {\r\n        /**\r\n         * Abort stops all new uploads and immediately exits the top level promise on this.done()\r\n         * Concurrent threads in flight clean up eventually.\r\n         */\r\n        this.abortController.abort();\r\n    }\r\n\r\n    public async done(): Promise<\r\n        CompleteMultipartUploadCommandOutput | AbortMultipartUploadCommandOutput\r\n    > {\r\n        return await Promise.race([\r\n            this.__doMultipartCopy(),\r\n            this.__abortTimeout(this.abortController.signal),\r\n        ]);\r\n    }\r\n\r\n    private async __doMultipartCopy(): Promise<CompleteMultipartUploadCommandOutput> {\r\n        return this.copyObjectMultipart(this.params, \"\");\r\n    }\r\n\r\n    private async __abortTimeout(\r\n        abortSignal: AbortSignal\r\n    ): Promise<AbortMultipartUploadCommandOutput> {\r\n        return new Promise((resolve, reject) => {\r\n            abortSignal.onabort = () => {\r\n                const abortError = new Error(\"Upload aborted.\");\r\n                abortError.name = \"AbortError\";\r\n\r\n                this.abortMultipartCopy(\r\n                    this.params.destination_bucket,\r\n                    this.params.copied_object_name,\r\n                    this.uploadId,\r\n                    \"\"\r\n                ).then(() => {\r\n                    reject(abortError);\r\n                });\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Throws the error of initiateMultipartCopy in case such occures\r\n     * @param {*} options an object of parameters obligated to hold the below keys\r\n     * (note that copy_part_size_bytes, copied_object_permissions, expiration_period are optional and will be assigned with default values if not given)\r\n     * @param {*} request_context optional parameter for logging purposes\r\n     */\r\n    private async copyObjectMultipart(\r\n        {\r\n            source_bucket,\r\n            object_key,\r\n            destination_bucket,\r\n            copied_object_name,\r\n            object_size,\r\n            copy_part_size_bytes,\r\n            copied_object_permissions,\r\n            expiration_period,\r\n            server_side_encryption,\r\n            content_type,\r\n            content_disposition,\r\n            content_encoding,\r\n            content_language,\r\n            metadata,\r\n            cache_control,\r\n            storage_class,\r\n        }: CopyObjectMultipartOptions,\r\n        request_context: string\r\n    ) {\r\n        const upload_id = await this.initiateMultipartCopy(\r\n            destination_bucket,\r\n            copied_object_name,\r\n            copied_object_permissions,\r\n            expiration_period,\r\n            request_context,\r\n            server_side_encryption,\r\n            content_type,\r\n            content_disposition,\r\n            content_encoding,\r\n            content_language,\r\n            metadata,\r\n            cache_control,\r\n            storage_class\r\n        );\r\n\r\n        this.uploadId = upload_id;\r\n\r\n        const partitionsRangeArray = calculatePartitionsRangeArray(\r\n            object_size,\r\n            copy_part_size_bytes\r\n        );\r\n\r\n        const copyPartFunctionsArray: Promise<UploadPartCopyCommandOutput>[] =\r\n            [];\r\n\r\n        partitionsRangeArray.forEach((partitionRange, index) => {\r\n            copyPartFunctionsArray.push(\r\n                this.copyPart(\r\n                    source_bucket,\r\n                    destination_bucket,\r\n                    index + 1,\r\n                    object_key,\r\n                    partitionRange,\r\n                    copied_object_name,\r\n                    upload_id\r\n                )\r\n            );\r\n        });\r\n\r\n        return Promise.all(copyPartFunctionsArray)\r\n            .then((copy_results) => {\r\n                this.logger.info({\r\n                    msg: `copied all parts successfully: ${JSON.stringify(\r\n                        copy_results\r\n                    )}`,\r\n                    context: request_context,\r\n                });\r\n\r\n                if (copy_results.length === 1) {\r\n                    //Don't send the complete multipart upload command when there was only one part\r\n                    const result: CompleteMultipartUploadCommandOutput = {\r\n                        $metadata: {},\r\n                        Bucket: this.params.destination_bucket,\r\n                        Key: this.params.object_key,\r\n                    };\r\n                    return Promise.resolve(result);\r\n                }\r\n\r\n                const copyResultsForCopyCompletion =\r\n                    prepareResultsForCopyCompletion(copy_results);\r\n                return this.completeMultipartCopy(\r\n                    destination_bucket,\r\n                    copyResultsForCopyCompletion,\r\n                    copied_object_name,\r\n                    upload_id,\r\n                    request_context\r\n                );\r\n            })\r\n            .catch(() => {\r\n                return this.abortMultipartCopy(\r\n                    destination_bucket,\r\n                    copied_object_name,\r\n                    upload_id,\r\n                    request_context\r\n                );\r\n            });\r\n    }\r\n\r\n    private initiateMultipartCopy(\r\n        destination_bucket: string,\r\n        copied_object_name: string,\r\n        copied_object_permissions?: string,\r\n        expiration_period?: Date,\r\n        request_context?: string,\r\n        server_side_encryption?: string,\r\n        content_type?: string,\r\n        content_disposition?: string,\r\n        content_encoding?: string,\r\n        content_language?: string,\r\n        metadata?: Record<string, string>,\r\n        cache_control?: string,\r\n        storage_class?: string\r\n    ) {\r\n        const params: CreateMultipartUploadCommandInput = {\r\n            Bucket: destination_bucket,\r\n            Key: copied_object_name,\r\n        };\r\n\r\n        params.ACL =\r\n            copied_object_permissions || DEFAULT_COPIED_OBJECT_PERMISSIONS;\r\n        if (expiration_period) params.Expires = expiration_period;\r\n        if (server_side_encryption)\r\n            params.ServerSideEncryption = server_side_encryption;\r\n        if (content_type) params.ContentType = content_type;\r\n        if (content_disposition)\r\n            params.ContentDisposition = content_disposition;\r\n        if (content_encoding) params.ContentEncoding = content_encoding;\r\n        if (content_language) params.ContentLanguage = content_language;\r\n        if (metadata) params.Metadata = metadata;\r\n        if (cache_control) params.CacheControl = cache_control;\r\n        if (storage_class) params.StorageClass = storage_class;\r\n\r\n        const command = new CreateMultipartUploadCommand(params);\r\n\r\n        return this.s3Client\r\n            .send(command)\r\n            .then((result) => {\r\n                this.logger.info({\r\n                    msg: `multipart copy initiated successfully: ${JSON.stringify(\r\n                        result\r\n                    )}`,\r\n                    context: request_context,\r\n                });\r\n                return Promise.resolve(result.UploadId);\r\n            })\r\n            .catch((err) => {\r\n                this.logger.error({\r\n                    msg: \"multipart copy failed to initiate\",\r\n                    context: request_context,\r\n                    error: err,\r\n                });\r\n                return Promise.reject(err);\r\n            });\r\n    }\r\n\r\n    private copyPart(\r\n        source_bucket: string,\r\n        destination_bucket: string,\r\n        part_number: number,\r\n        object_key: string,\r\n        partition_range: string,\r\n        copied_object_name: string,\r\n        upload_id: string | undefined\r\n    ) {\r\n        const encodedSourceKey = encodeURIComponent(\r\n            `${source_bucket}/${object_key}`\r\n        );\r\n        const params = {\r\n            Bucket: destination_bucket,\r\n            CopySource: encodedSourceKey,\r\n            CopySourceRange: \"bytes=\" + partition_range,\r\n            Key: copied_object_name,\r\n            PartNumber: part_number,\r\n            UploadId: upload_id,\r\n        };\r\n\r\n        if (this.abortController.signal.aborted) {\r\n            return Promise.reject(\"Aborted\");\r\n        }\r\n\r\n        const command = new UploadPartCopyCommand(params);\r\n\r\n        return this.s3Client\r\n            .send(command)\r\n            .then((result) => {\r\n                this.logger.info({\r\n                    msg: `CopyPart ${part_number} succeeded: ${JSON.stringify(\r\n                        result\r\n                    )}`,\r\n                });\r\n                return Promise.resolve(result);\r\n            })\r\n            .catch((err) => {\r\n                this.logger.error({\r\n                    msg: `CopyPart ${part_number} Failed: ${JSON.stringify(\r\n                        err\r\n                    )}`,\r\n                    error: err,\r\n                });\r\n                return Promise.reject(err);\r\n            });\r\n    }\r\n\r\n    private abortMultipartCopy(\r\n        destination_bucket: string,\r\n        copied_object_name: string,\r\n        upload_id: string | undefined,\r\n        request_context: string\r\n    ) {\r\n        const params: AbortMultipartUploadCommandInput = {\r\n            Bucket: destination_bucket,\r\n            Key: copied_object_name,\r\n            UploadId: upload_id,\r\n        };\r\n\r\n        const command = new AbortMultipartUploadCommand(params);\r\n\r\n        return this.s3Client\r\n            .send(command)\r\n            .then(() => {\r\n                const listCommand = new ListPartsCommand(params);\r\n                return this.s3Client.send(listCommand);\r\n            })\r\n            .catch((err) => {\r\n                this.logger.error({\r\n                    msg: \"abort multipart copy failed\",\r\n                    context: request_context,\r\n                    error: err,\r\n                });\r\n\r\n                return Promise.reject(err);\r\n            })\r\n            .then((parts_list) => {\r\n                if (parts_list.Parts && parts_list.Parts.length > 0) {\r\n                    const err = new ErrorWithDetails(\r\n                        \"Abort procedure passed but copy parts were not removed\"\r\n                    );\r\n                    err.details = parts_list;\r\n\r\n                    this.logger.error({\r\n                        msg: \"abort multipart copy failed, copy parts were not removed\",\r\n                        context: request_context,\r\n                        error: err,\r\n                    });\r\n\r\n                    return Promise.reject(err);\r\n                } else {\r\n                    this.logger.info({\r\n                        msg: `multipart copy aborted successfully: ${JSON.stringify(\r\n                            parts_list\r\n                        )}`,\r\n                        context: request_context,\r\n                    });\r\n\r\n                    const err = new ErrorWithDetails(\"multipart copy aborted\");\r\n                    err.details = params;\r\n\r\n                    return Promise.reject(err);\r\n                }\r\n            });\r\n    }\r\n\r\n    private completeMultipartCopy(\r\n        destination_bucket: string,\r\n        ETags_array: CompletedPart[],\r\n        copied_object_name: string,\r\n        upload_id: string | undefined,\r\n        request_context: string\r\n    ) {\r\n        const params: CompleteMultipartUploadCommandInput = {\r\n            Bucket: destination_bucket,\r\n            Key: copied_object_name,\r\n            MultipartUpload: {\r\n                Parts: ETags_array,\r\n            },\r\n            UploadId: upload_id,\r\n        };\r\n\r\n        const command = new CompleteMultipartUploadCommand(params);\r\n\r\n        return this.s3Client\r\n            .send(command)\r\n            .then((result) => {\r\n                this.logger.info({\r\n                    msg: `multipart copy completed successfully: ${JSON.stringify(\r\n                        result\r\n                    )}`,\r\n                    context: request_context,\r\n                });\r\n                return Promise.resolve(result);\r\n            })\r\n            .catch((err) => {\r\n                this.logger.error({\r\n                    msg: `Multipart upload failed: ${JSON.stringify(params)}`,\r\n                    context: request_context,\r\n                    error: err,\r\n                });\r\n                return Promise.reject(err);\r\n            });\r\n    }\r\n}\r\n\r\nfunction prepareResultsForCopyCompletion(\r\n    copy_parts_results_array: UploadPartCopyCommandOutput[]\r\n) {\r\n    const resultArray: CompletedPart[] = [];\r\n\r\n    copy_parts_results_array.forEach((copy_part, index) => {\r\n        if (copy_part.CopyPartResult) {\r\n            const newCopyPart: CompletedPart = {};\r\n            newCopyPart.ETag = copy_part.CopyPartResult.ETag;\r\n            newCopyPart.PartNumber = index + 1;\r\n            resultArray.push(newCopyPart);\r\n        }\r\n    });\r\n\r\n    return resultArray;\r\n}\r\n\r\nfunction calculatePartitionsRangeArray(\r\n    object_size: number,\r\n    copy_part_size_bytes?: number\r\n) {\r\n    const partitions: string[] = [];\r\n    const copy_part_size = copy_part_size_bytes || DEFAULT_COPY_PART_SIZE_BYTES;\r\n    const numOfPartitions = Math.floor(object_size / copy_part_size);\r\n    const remainder = object_size % copy_part_size;\r\n    let index: number, partition: string;\r\n\r\n    for (index = 0; index < numOfPartitions; index++) {\r\n        const nextIndex = index + 1;\r\n        if (\r\n            nextIndex === numOfPartitions &&\r\n            remainder < COPY_PART_SIZE_MINIMUM_BYTES\r\n        ) {\r\n            partition =\r\n                index * copy_part_size +\r\n                \"-\" +\r\n                (nextIndex * copy_part_size + remainder - 1);\r\n        } else {\r\n            partition =\r\n                index * copy_part_size + \"-\" + (nextIndex * copy_part_size - 1);\r\n        }\r\n        partitions.push(partition);\r\n    }\r\n\r\n    if (numOfPartitions == 0 || remainder >= COPY_PART_SIZE_MINIMUM_BYTES) {\r\n        partition =\r\n            index * copy_part_size +\r\n            \"-\" +\r\n            (index * copy_part_size + remainder - 1);\r\n        partitions.push(partition);\r\n    }\r\n\r\n    return partitions;\r\n}\r\n\r\nfunction getDefaultLogger() {\r\n    const logger: Logger = {\r\n        info: ({ msg, context }) => {\r\n            //console.log(`${context}: ${msg}`);\r\n        },\r\n        error: ({ msg, error, context }) => {\r\n            //console.error(`${context}: ${msg}`, error);\r\n        },\r\n    };\r\n    return logger;\r\n}\r\n"]}