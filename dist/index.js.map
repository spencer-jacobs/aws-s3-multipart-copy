{"version":3,"sources":["../src/copy-object-multipart.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    S3Client,\r\n    CreateMultipartUploadCommand,\r\n    UploadPartCopyCommand,\r\n    AbortMultipartUploadCommand,\r\n    ListPartsCommand,\r\n    CompleteMultipartUploadCommand,\r\n    CompleteMultipartUploadCommandInput,\r\n    UploadPartCopyCommandOutput,\r\n    CompletedPart,\r\n    AbortMultipartUploadCommandInput,\r\n    CreateMultipartUploadCommandInput,\r\n} from \"@aws-sdk/client-s3\";\r\nimport * as _ from \"lodash\";\r\n\r\nconst COPY_PART_SIZE_MINIMUM_BYTES = 5242880; // 5MB in bytes\r\nconst DEFAULT_COPY_PART_SIZE_BYTES = 50000000; // 50 MB in bytes\r\nconst DEFAULT_COPIED_OBJECT_PERMISSIONS = \"private\";\r\n\r\nexport interface Logger {\r\n    info: (arg: LoggerInfoArgument) => any;\r\n    error: (arg: LoggerErrorArgument) => any;\r\n}\r\nexport interface LoggerInfoArgument {\r\n    msg: string;\r\n    context?: string;\r\n}\r\n\r\nexport interface LoggerErrorArgument {\r\n    msg: string;\r\n    error?: ErrorWithDetails;\r\n    context?: string;\r\n}\r\n\r\nexport class ErrorWithDetails extends Error {\r\n    details?: any;\r\n}\r\n\r\nlet s3Client: S3Client;\r\nlet logger: Logger;\r\n\r\nexport function init(client: S3Client, initialized_logger: Logger) {\r\n    s3Client = client;\r\n    logger = initialized_logger;\r\n\r\n    if (!(s3Client instanceof S3Client)) {\r\n        throw new Error(\"Invalid S3Client object received\");\r\n    } else {\r\n        if (\r\n            logger &&\r\n            typeof logger.info === \"function\" &&\r\n            typeof logger.error === \"function\"\r\n        ) {\r\n            logger.info({ msg: \"S3 client initialized successfully\" });\r\n        } else {\r\n            throw new Error(\"Invalid logger object received\");\r\n        }\r\n    }\r\n}\r\n\r\nexport interface CopyObjectMultipartOptions {\r\n    source_bucket: string;\r\n    object_key: string;\r\n    destination_bucket: string;\r\n    copied_object_name: string;\r\n    object_size: number;\r\n    copy_part_size_bytes?: number;\r\n    copied_object_permissions?: string;\r\n    expiration_period?: Date;\r\n    server_side_encryption?: string;\r\n    content_type?: string;\r\n    content_disposition?: string;\r\n    content_encoding?: string;\r\n    content_language?: string;\r\n    metadata?: Record<string, string>;\r\n    cache_control?: string;\r\n    storage_class?: string;\r\n}\r\n\r\n/**\r\n * Throws the error of initiateMultipartCopy in case such occures\r\n * @param {*} options an object of parameters obligated to hold the below keys\r\n * (note that copy_part_size_bytes, copied_object_permissions, expiration_period are optional and will be assigned with default values if not given)\r\n * @param {*} request_context optional parameter for logging purposes\r\n */\r\nexport async function copyObjectMultipart(\r\n    {\r\n        source_bucket,\r\n        object_key,\r\n        destination_bucket,\r\n        copied_object_name,\r\n        object_size,\r\n        copy_part_size_bytes,\r\n        copied_object_permissions,\r\n        expiration_period,\r\n        server_side_encryption,\r\n        content_type,\r\n        content_disposition,\r\n        content_encoding,\r\n        content_language,\r\n        metadata,\r\n        cache_control,\r\n        storage_class,\r\n    }: CopyObjectMultipartOptions,\r\n    request_context: string\r\n) {\r\n    const upload_id = await initiateMultipartCopy(\r\n        destination_bucket,\r\n        copied_object_name,\r\n        copied_object_permissions,\r\n        expiration_period,\r\n        request_context,\r\n        server_side_encryption,\r\n        content_type,\r\n        content_disposition,\r\n        content_encoding,\r\n        content_language,\r\n        metadata,\r\n        cache_control,\r\n        storage_class\r\n    );\r\n    const partitionsRangeArray = calculatePartitionsRangeArray(\r\n        object_size,\r\n        copy_part_size_bytes\r\n    );\r\n    const copyPartFunctionsArray: ReturnType<typeof copyPart>[] = [];\r\n\r\n    partitionsRangeArray.forEach((partitionRange, index) => {\r\n        copyPartFunctionsArray.push(\r\n            copyPart(\r\n                source_bucket,\r\n                destination_bucket,\r\n                index + 1,\r\n                object_key,\r\n                partitionRange,\r\n                copied_object_name,\r\n                upload_id\r\n            )\r\n        );\r\n    });\r\n\r\n    return Promise.all(copyPartFunctionsArray)\r\n        .then((copy_results) => {\r\n            logger.info({\r\n                msg: `copied all parts successfully: ${JSON.stringify(\r\n                    copy_results\r\n                )}`,\r\n                context: request_context,\r\n            });\r\n\r\n            const copyResultsForCopyCompletion =\r\n                prepareResultsForCopyCompletion(copy_results);\r\n            return completeMultipartCopy(\r\n                destination_bucket,\r\n                copyResultsForCopyCompletion,\r\n                copied_object_name,\r\n                upload_id,\r\n                request_context\r\n            );\r\n        })\r\n        .catch(() => {\r\n            return abortMultipartCopy(\r\n                destination_bucket,\r\n                copied_object_name,\r\n                upload_id,\r\n                request_context\r\n            );\r\n        });\r\n}\r\n\r\nfunction initiateMultipartCopy(\r\n    destination_bucket: string,\r\n    copied_object_name: string,\r\n    copied_object_permissions?: string,\r\n    expiration_period?: Date,\r\n    request_context?: string,\r\n    server_side_encryption?: string,\r\n    content_type?: string,\r\n    content_disposition?: string,\r\n    content_encoding?: string,\r\n    content_language?: string,\r\n    metadata?: Record<string, string>,\r\n    cache_control?: string,\r\n    storage_class?: string\r\n) {\r\n    const params: CreateMultipartUploadCommandInput = {\r\n        Bucket: destination_bucket,\r\n        Key: copied_object_name,\r\n    };\r\n\r\n    params.ACL = copied_object_permissions || DEFAULT_COPIED_OBJECT_PERMISSIONS;\r\n    if (expiration_period) params.Expires = expiration_period;\r\n    if (server_side_encryption)\r\n        params.ServerSideEncryption = server_side_encryption;\r\n    if (content_type) params.ContentType = content_type;\r\n    if (content_disposition) params.ContentDisposition = content_disposition;\r\n    if (content_encoding) params.ContentEncoding = content_encoding;\r\n    if (content_language) params.ContentLanguage = content_language;\r\n    if (metadata) params.Metadata = metadata;\r\n    if (cache_control) params.CacheControl = cache_control;\r\n    if (storage_class) params.StorageClass = storage_class;\r\n\r\n    const command = new CreateMultipartUploadCommand(params);\r\n\r\n    return s3Client\r\n        .send(command)\r\n        .then((result) => {\r\n            logger.info({\r\n                msg: `multipart copy initiated successfully: ${JSON.stringify(\r\n                    result\r\n                )}`,\r\n                context: request_context,\r\n            });\r\n            return Promise.resolve(result.UploadId);\r\n        })\r\n        .catch((err) => {\r\n            logger.error({\r\n                msg: \"multipart copy failed to initiate\",\r\n                context: request_context,\r\n                error: err,\r\n            });\r\n            return Promise.reject(err);\r\n        });\r\n}\r\n\r\nfunction copyPart(\r\n    source_bucket: string,\r\n    destination_bucket: string,\r\n    part_number: number,\r\n    object_key: string,\r\n    partition_range: string,\r\n    copied_object_name: string,\r\n    upload_id: string | undefined\r\n) {\r\n    const encodedSourceKey = encodeURIComponent(\r\n        `${source_bucket}/${object_key}`\r\n    );\r\n    const params = {\r\n        Bucket: destination_bucket,\r\n        CopySource: encodedSourceKey,\r\n        CopySourceRange: \"bytes=\" + partition_range,\r\n        Key: copied_object_name,\r\n        PartNumber: part_number,\r\n        UploadId: upload_id,\r\n    };\r\n\r\n    const command = new UploadPartCopyCommand(params);\r\n\r\n    return s3Client\r\n        .send(command)\r\n        .then((result) => {\r\n            logger.info({\r\n                msg: `CopyPart ${part_number} succeeded: ${JSON.stringify(\r\n                    result\r\n                )}`,\r\n            });\r\n            return Promise.resolve(result);\r\n        })\r\n        .catch((err) => {\r\n            logger.error({\r\n                msg: `CopyPart ${part_number} Failed: ${JSON.stringify(err)}`,\r\n                error: err,\r\n            });\r\n            return Promise.reject(err);\r\n        });\r\n}\r\n\r\nfunction abortMultipartCopy(\r\n    destination_bucket: string,\r\n    copied_object_name: string,\r\n    upload_id: string | undefined,\r\n    request_context: string\r\n) {\r\n    const params: AbortMultipartUploadCommandInput = {\r\n        Bucket: destination_bucket,\r\n        Key: copied_object_name,\r\n        UploadId: upload_id,\r\n    };\r\n\r\n    const command = new AbortMultipartUploadCommand(params);\r\n\r\n    return s3Client\r\n        .send(command)\r\n        .then(() => {\r\n            const listCommand = new ListPartsCommand(params);\r\n            return s3Client.send(listCommand);\r\n        })\r\n        .catch((err) => {\r\n            logger.error({\r\n                msg: \"abort multipart copy failed\",\r\n                context: request_context,\r\n                error: err,\r\n            });\r\n\r\n            return Promise.reject(err);\r\n        })\r\n        .then((parts_list) => {\r\n            if (parts_list.Parts && parts_list.Parts.length > 0) {\r\n                const err = new ErrorWithDetails(\r\n                    \"Abort procedure passed but copy parts were not removed\"\r\n                );\r\n                err.details = parts_list;\r\n\r\n                logger.error({\r\n                    msg: \"abort multipart copy failed, copy parts were not removed\",\r\n                    context: request_context,\r\n                    error: err,\r\n                });\r\n\r\n                return Promise.reject(err);\r\n            } else {\r\n                logger.info({\r\n                    msg: `multipart copy aborted successfully: ${JSON.stringify(\r\n                        parts_list\r\n                    )}`,\r\n                    context: request_context,\r\n                });\r\n\r\n                const err = new ErrorWithDetails(\"multipart copy aborted\");\r\n                err.details = params;\r\n\r\n                return Promise.reject(err);\r\n            }\r\n        });\r\n}\r\n\r\nfunction completeMultipartCopy(\r\n    destination_bucket: string,\r\n    ETags_array: CompletedPart[],\r\n    copied_object_name: string,\r\n    upload_id: string | undefined,\r\n    request_context: string\r\n) {\r\n    const params: CompleteMultipartUploadCommandInput = {\r\n        Bucket: destination_bucket,\r\n        Key: copied_object_name,\r\n        MultipartUpload: {\r\n            Parts: ETags_array,\r\n        },\r\n        UploadId: upload_id,\r\n    };\r\n\r\n    const command = new CompleteMultipartUploadCommand(params);\r\n\r\n    return s3Client\r\n        .send(command)\r\n        .then((result) => {\r\n            logger.info({\r\n                msg: `multipart copy completed successfully: ${JSON.stringify(\r\n                    result\r\n                )}`,\r\n                context: request_context,\r\n            });\r\n            return Promise.resolve(result);\r\n        })\r\n        .catch((err) => {\r\n            logger.error({\r\n                msg: \"Multipart upload failed\",\r\n                context: request_context,\r\n                error: err,\r\n            });\r\n            return Promise.reject(err);\r\n        });\r\n}\r\n\r\nfunction calculatePartitionsRangeArray(\r\n    object_size: number,\r\n    copy_part_size_bytes?: number\r\n) {\r\n    const partitions: string[] = [];\r\n    const copy_part_size = copy_part_size_bytes || DEFAULT_COPY_PART_SIZE_BYTES;\r\n    const numOfPartitions = Math.floor(object_size / copy_part_size);\r\n    const remainder = object_size % copy_part_size;\r\n    let index: number, partition: string;\r\n\r\n    for (index = 0; index < numOfPartitions; index++) {\r\n        const nextIndex = index + 1;\r\n        if (\r\n            nextIndex === numOfPartitions &&\r\n            remainder < COPY_PART_SIZE_MINIMUM_BYTES\r\n        ) {\r\n            partition =\r\n                index * copy_part_size +\r\n                \"-\" +\r\n                (nextIndex * copy_part_size + remainder - 1);\r\n        } else {\r\n            partition =\r\n                index * copy_part_size + \"-\" + (nextIndex * copy_part_size - 1);\r\n        }\r\n        partitions.push(partition);\r\n    }\r\n\r\n    if (numOfPartitions == 0 || remainder >= COPY_PART_SIZE_MINIMUM_BYTES) {\r\n        partition =\r\n            index * copy_part_size +\r\n            \"-\" +\r\n            (index * copy_part_size + remainder - 1);\r\n        partitions.push(partition);\r\n    }\r\n\r\n    return partitions;\r\n}\r\n\r\nfunction prepareResultsForCopyCompletion(\r\n    copy_parts_results_array: UploadPartCopyCommandOutput[]\r\n) {\r\n    const resultArray: CompletedPart[] = [];\r\n\r\n    copy_parts_results_array.forEach((copy_part, index) => {\r\n        if (copy_part.CopyPartResult) {\r\n            const newCopyPart: CompletedPart = {};\r\n            newCopyPart.ETag = copy_part.CopyPartResult.ETag;\r\n            newCopyPart.PartNumber = index + 1;\r\n            resultArray.push(newCopyPart);\r\n        }\r\n    });\r\n\r\n    return resultArray;\r\n}\r\n"]}